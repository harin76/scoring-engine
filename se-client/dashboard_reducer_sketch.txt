export const dashboard = (state = {}, action) => {
  switch (action.type) {
    case 'VIEW_SELECTED':
      const dashboardConfig = new DashboardConfig(action.dashboardConfig); // meta
      const currentView = dashboardConfig.getViewByName(action.view); // if action.view is undefined, it brings first view
      const rawData = action.rawData;
      const sourceFilters = new FilterGroup(rawData, currentView.filters.source);
      const source = new Pipeline(rawData)
                          .filter(sourceFilters.current)
                          .transform()
                          .aggregate(currentView.dimension, currentView.metrics)
                          .enrich(currentView.enrich)
                          .finish();
      const datasetFilters = new FilterGroup(source, currentView.filters.dataset);
      const dataSets = new Pipeline(source)
                            .filter(dataSetFilters.current)
                            .pickDatasets(currentView.dataSets);

      return {
        dashboardConfig,
        currentView,
        rawData,
        source,
        sourceFilters,
        dataSetFilters,
        dataSets
      };

    case 'DATA_FETCHED':
      const dashboardConfig = state.dashboardConfig; // THIS HAS NOT CHANGED
      const currentView = state.currentView; // Dont pass 'default'
      const rawData = action.rawData;
      const sourceFilters = new FilterGroup(rawData, currentView.filters.source);
      const source = new Pipeline(rawData)
                          .filter(sourceFilters.current)
                          .transform()
                          .aggregate(currentView.dimension, currentView.metrics)
                          .enrich(currentView.enrich)
                          .finish();
      const datasetFilters = new FilterGroup(source, currentView.filters.dataset);
      const dataSets = new Pipeline(source)
                            .filter(dataSetFilters.current)
                            .pickDatasets(currentView.dataSets);
      return _.merge({}, state, {rawData, sourceFilters, source, dataSetFilters, dataSets});

    case 'SOURCE_FILTER_CHANGED':
      const dashboardConfig = state.dashboardConfig;
      const currentView = state.currentView;
      const rawData = state.rawData;
      const sourceFilters = state.sourceFilters;

      // This mutation is very bad, need other solution
      // maybe split it into a separate state
      sourceFilters.setFilter(action.filters)
      const source = new Pipeline(rawData)
                          .filter(sourceFilters.current)
                          .transform()
                          .aggregate(currentView.dimension, currentView.metrics)
                          .enrich(currentView.enrich)
                          .finish();
      const datasetFilters = new FilterGroup(source, currentView.filters.dataset);
      const dataSets = new Pipeline(source)
                            .filter(dataSetFilters.current)
                            .pickDatasets(currentView.dataSets);
      return _.merge({}, state, {sourceFilters, source, dataSetFilters, dataSets});

    case 'DATASET_FILTER_CHANGED':
    const source = state.Source
    const datasetFilters = state.dataSetFilters;

    // This mutation is very bad, need other solution
    // maybe split it into a separate state

    // TODO need to handle custom filter here
    dataSetFilters.setFilter(action.filter)

    const dataSets = new Pipeline(source)
                          .filter(dataSetFilters.current)
                          .pickDatasets(currentView.dataSets);
    return _.merge({}, state, {dataSetFilters, dataSets});

  }
}
